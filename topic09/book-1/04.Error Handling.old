# Error Handling with Promises

-  Try to POST user data that violates the schema (e.g. ``{"userName":"frankx"}``). You should get the following:

<img src="C:\Users\Frank\Desktop\repos\2021\wad2\topic09\book-1\img\hang.png" alt="No Response" style="zoom:67%;" />

You'll notice that the request from the Postman client hangs and eventually will timeout. **No HTTP response is returned.** 

If you look at the console running the Express App, you will see the error: 

```
2 users were successfully stored.
(node:6204) UnhandledPromiseRejectionWarning: ValidationError: password: Path `password` is required.
    at new ValidationError (C:\Users\Frank\Desktop\repos\2020\ewd-examples-2020\node_modules\mongoose\lib\error\validation.js:30:11)
```

Unfortunately with Express, if a Promise is rejected **and not handled**, execution of the "middleware stack" will stop and a response will not be sent. The client will be left hanging. **This will occur even if you have error handler middleware.** 

In this section we will create a generic error handler function that we can use to handle promise rejections.


- Open */api/users/index.js* and update the ``POST /`` route to the following:
```javascript
// register
router.post('/', async (req, res, next) => {
    try{
        await User(req.body).save()
        res.status(200).json({ success: true, token: "FakeTokenForNow" })
    }
    catch (err){
        next(err)
    }
});
```

Notice that this code now has the next parameter, which is the next function in the middleware stack. It will catch and pass any promise-based exceptions on though the middleware stack by explicitly calling the ``next`` function .  Adding the ``try{..}catch(err){..}`` catches and uses ``next(err)`` to pass the error on the next error handler in the middleware stack. 
- Make the same request again. Your HTTP Client (Postman) should now return the following:  

  <img src="./img/image-20211115113516902.png" alt="image-20211115113516902" style="zoom:40%;" />

Now you are are getting a response and the client is not "hanging". However you will notice the error also includes validation error details, line numbers , file locations, and script names. **NOT GOOD: This information could be used to hack the API**.  **To fix this, we can include Error handling middleware in our Express app.**

- Open */index.js*, the main entry point for the app in the **movies-api** folder, and add the following function **before you assign the ``app`` constant**:  
```javascript
const errHandler = (err, req, res, next) => {
  /* if the error in development then send stack trace to display whole error,
  if it's in production then just send error message  */
  if(process.env.NODE_ENV === 'production') {
    return res.status(500).send(`Something went wrong!`);
  }
  res.status(500).send(`Hey!! You caught the error üëçüëç. Here's the details: ${err.stack} `);
};
```

- Then, to handle all errors, add the following line of code **to the bottom of the middleware stack**(i.e. after the last ``app.use(..)`` statement )
```javascript
app.use(errHandler);
```
- Now run the same request again for ``POST localhost:8080/api/users``. This time you should see the following:  
<img src="./img/image-20211115114322072.png" alt="image-20211115114322072" style="zoom:50%;" />  
You still see the error stack trace however, **if this was in production, you would just see the message "Something went wrong"**. Test this by setting ``NODE_ENV`` to "production" in the *.env*.

## Exercise

- Handle other potential Promise rejections by add the same ``.catch(..)`` to the other routes in *./api/users/index.js*

## Commit your changes

- Commit the changes you have just made using git.

~~~bash
git add -A
git commit -m "Week 9 Error Handling"
~~~