# OPTIONAL: Hooking up the React App via proxying (just a little!).

We will now connect your Hacker News React App to the API. This step requires completion of the React labs.

## System Architecture

We will keep using the **create-react-app** framework you were using previously. **create-react-app** provides a mechanism for working with an API server in development. We can have the development server proxy requests intended for our API server as follows:

![Development Architecture](./img/architecture.png)

The React app makes an API request to localhost:3000, the Webpack development server. The development server proxies that request to the API server. This will remove any Cross-Origin-Resource-Sharing (CORS) issues with the browser.
For this to work we need to launch both the MovieDB React App using the create-react-app dev server and the Express API server in order to run the app locally. We also need to get the react dev server to proxy requests to the Express API.


#### Proxy Server
To have the React development server proxy our API requests to our Express API server, we need to add the following to the **package.json file in the MovieDB React App folder from previous labs**

```json
...
"proxy":"http://localhost:8080",
...
```

- **You must start/restart your MovieDB React app for the new proxy setting to take affect.** 

The Webpack server should now forward any request for unknown resources coming into the Webpack server though to your Express app listening on port 8080.



## Integrate the Express Hacker News API

Currently the MovieDB React app uses the */src/api/tmdb-api.js* to integrate the MoviesDB. We will now redirect **just the GET movies** to our local API.

+ In the ``/src/api`` folder of the React MovieDB app, edit ``tmdb-api.js`` as follows: Replace the  ``export const getMovies = ...`` statement with the following.

```javascript
export const getMovies = () => {
    return fetch(
      '/api/movies'
    )
      .then(res => res.json())
      .then(json => {return json.movies;});
  };
  ....as before
```
as the ``/api.movies`` path does not exist on the Webpack server, it is proxies to ``http:/localhost:8080``,  which returns a list of movies (just two!) as before. 

Run and check the React App in the browser. You should see just the two movies in the local API so far. 

![MovieDB React App Integration](./img/api.png)

We will leave it there for now. In the next lab we will refactor and extend the API integration...