# Create a Login and Signup page

**THE FOLLOWING STEPS ARE FOR THE REACT APPLICATION**


### Authentication Context

+ In the */src/contexts* folder create a file called **authContext.js** with the following content:   

```javascript
import React, { createContext, useContext, useState } from 'react';

export const AuthContext = createContext();

const AuthContextProvider = props => {
  const existingToken = localStorage.getItem("token");
  const [authToken, setAuthToken] = useState(existingToken);
  const setToken = (data) => {
    localStorage.setItem("token", data);
    setAuthToken(data);
  }
  
  return (
      <AuthContext.Provider
        value={{
          authToken,
          setAuthToken: setToken
        }}
      >
        {props.children}
      </AuthContext.Provider>
  )
}

export function useAuth() {
  return useContext(AuthContext);
}

export default AuthContextProvider;
```

You will use this context to keep track of the user authentication context.
Lets create a basic React page that can manage User registration and Authentication from your MovieDB App using context and state.

## MoviesContext and Home Page

To make sure the homepage can detect (and request movies after authentication), we need to update the ``useEffect()`` function to detect a successful authentication:  

+ Update ``MoviesContextProvider`` in */src/contexts/movieContext.js* by adding a new state ``authenticated`` and updating the ``useEffect(..)``. Replace the contents of the script with the following:

~~~javascript
import React, { useState, useEffect } from "react";
import StubAPI from "../api/stubAPI";
import { getMovies } from "../api/tmdb-api";

export const MoviesContext = React.createContext(null)

const MoviesContextProvider = props => {
  const [movies, setMovies] = useState([]);
  const [authenticated, setAuthenticated] = useState(false);

  const addToFavorites = movieId => {
    setMovies(movies => {
      const index = movies.map(m => m.id).indexOf(movieId);
      StubAPI.add(movies[index]);
      movies.splice(index, 1);
      return [...movies];
    });
  };
  useEffect(() => {
    getMovies().then(movies => {
      setMovies(movies);
    });
  },[authenticated]);

  return (
    <MoviesContext.Provider
      value={{
        movies: movies,
        addToFavorites: addToFavorites,
        setAuthenticated: setAuthenticated
      }}
    >
      {props.children}
    </MoviesContext.Provider>
  );
};

export default MoviesContextProvider

~~~


## Login and Signup

+ In */src/components* folder, create a folder called *loginComponents*  and add a script *index.js* with the following contents:

~~~Javascript
import styled from 'styled-components';

const Card = styled.div`
  box-sizing: border-box;
  max-width: 410px;
  margin: 0 auto;
  padding: 0 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
`;

const Form = styled.div`
  display: flex;
  flex-direction: column;
  width: 100%;
`;

const Input = styled.input`
  padding: 1rem;
  border: 1px solid #999;
  margin-bottom: 1rem;
  font-size: 0.8rem;
`;

const Button = styled.button`
  background: linear-gradient(to bottom, #6371c7, #5563c1);
  border-color: #3f4eae;
  border-radius: 3px;
  padding: 1rem;
  color: white;
  font-weight: 700;
  width: 100%;
  margin-bottom: 1rem;
  font-size: 0.8rem;
`;

const Logo = styled.img`
  width: 50%;
  margin-bottom: 1rem;
`;

const Error = styled.div`
  background-color: red;
`;


export { Form, Input, Button, Logo, Card, Error };
~~~

+ In the */src/pages/* folder add a new file called *loginPage.js* with the following contents

~~~javascript
import React, { useState, useContext} from "react";
import { Link, Redirect } from "react-router-dom";
import * as api from '../api/tmdb-api';
import { Card,  Form, Input, Button, Error } from "../components/loginComponents";
import { useAuth } from "../contexts/authContext";
import {MoviesContext} from '../contexts/moviesContext'

function Login() {
  const [isLoggedIn, setLoggedIn] = useState(false);
  const [isError, setIsError] = useState(false);
  const [userName, setUserName] = useState("");
  const [password, setPassword] = useState("");
  const { setAuthToken } = useAuth();
  const context = useContext(MoviesContext);

  function userLogin() {
    api.login( userName, password)
    .then(result => {
      if (result.success) {
        setAuthToken(result.token);
        setLoggedIn(true);
      } else {
        setIsError(true);
      }
    }).catch(e => {
      console.log(e)
      setIsError(true);
    });
  }

  if (isLoggedIn) {
    context.setAuthenticated(true);
    return <Redirect to="/" />;
  }

  return (
    <Card>
      
      <Form>
        <Input
          type="username"
          value={userName}
          onChange={e => {
            setUserName(e.target.value);
          }}
          placeholder="username"
        />
        <Input
          type="password"
          value={password}
          onChange={e => {
            setPassword(e.target.value);
          }}
          placeholder="password"
        />
        <Button onClick={userLogin}>Sign In</Button>
      </Form>
      <Link to="/signup">Don't have an account?</Link>
        { isError &&<Error>The username or password provided were incorrect!</Error> }
    </Card>
  );
}

export default Login;
~~~

This script provides the Login Page and updates the MovieContext on successful authentication.

+ Add another file in *src/pages/* folder called *signupPage.js* with the following contents:

~~~javascript
import React, { useState} from "react";
import { Link, Redirect } from "react-router-dom";
import * as api from '../api/tmdb-api';
import { Card,  Form, Input, Button, } from "../components/loginComponents";
import { useAuth } from "../contexts/authContext";

function Signup() {
  //const [isLoggedIn, setLoggedIn] = useState(false);
  const [isError, setIsError] = useState(false);
  const [registered, setRegistered] = useState(false);
  const [userName, setUserName] = useState("");
  const [password, setPassword] = useState("");
  const [passwordAgain, setPasswordAgain] = useState("");

  function register() {
    if (password !== passwordAgain) {
        setIsError(true);
    }else{
    api.signup( userName, password)
    .then(result => {
      if (result.code===201) {
        setRegistered(true);
      } else {
        setIsError(true);
      }
    }).catch(e => {
      console.log(e)
      setIsError(true);
    });
  }}

  if (registered) {
    return <Redirect to="/" />;
  }
  return (
    <Card>
   
      <Form>
        <Input type="username"
          value={userName}
          onChange={e => {
            setUserName(e.target.value);
          }}  placeholder="username" />
        <Input type="password"
          value={password}
          onChange={e => {
            setPassword(e.target.value);
          }} placeholder="password" />
        <Input type="password"
          value={passwordAgain}
          onChange={e => {
            setPasswordAgain(e.target.value);
          }} placeholder="password again" />
        <Button onClick={register}>Sign Up</Button>
      </Form>
      <Link to="/login">Already have an account?</Link>
    </Card>
  );
}

export default Signup;
~~~

Again we import the *../api/tmdb-api.js* script to interact with the users api. We also use the *auth.js* script to manage local storage of the JWT token.

## Add the Login Page Routing and Context wrapping to App

We will now update the MovieDB app such that, if the user has not authenticated, we will present a link (in the form of a button) to the login page.

+ Open React MovieDBs */src/index.js* and add a new route for the login page.

~~~Javascript
...
import LoginPage from './pages/loginPage';
import SignupPage from './pages/signupPage';
import AuthContextProvider from './contexts/authContext'

...
    <AuthContextProvider>
      <Switch>
                ...
                <Route exact path="/login" component={LoginPage} />
                <Route path="/signup" component={SignupPage} /> />
                ...
      </Switch>
    </AuthContextProvider>
 ....
~~~  

## Protect the Home Page

Before the Home Page is rendered, check that the current user is authenticated.

+ Open */src/pages/homepage.js* and replace with the following:

~~~javascript
import React, { useContext } from "react";
import PageTemplate from '../components/templateMovieListPage'
import {MoviesContext} from '../contexts/moviesContext'
import AddToFavoritesButton from '../components/buttons/addToFavorites'
import { useAuth } from "../contexts/authContext";
import { Redirect} from "react-router-dom";

const MovieListPage = () => {
  const context = useContext(MoviesContext);
  const { authToken } = useAuth();
  return (
    <>{authToken?(
      <>
       <PageTemplate 
        title='All Movies'
        movies={context.movies}
        action={movie => <AddToFavoritesButton movie={movie} /> }
      />
      </>
    ):(
        <Redirect to="/login"    /> )}</>
  );
};

export default MovieListPage;
~~~

The above script redirects to the Login route if the user has not authenticated. 

## Test the App...


+ Now test the new login functionality. If not logged in you should see the following(Note the absence of a JWT token in the local storage):

![Not Authenticated](./img/hacker1.png)


+ Authenticate using username: user1, password: test1. This should return you to the home page and the list of movies. Note the JWT token in the local storage.

 ![Authenticated](./img/hacker3.png)

Notice the JSON web token value in the local storage.

Congratulations! You've included JWT in your app.


